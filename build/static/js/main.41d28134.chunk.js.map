{"version":3,"sources":["components/Container/index.js","components/Header/index.js","components/Body/index.js","components/Search/index.js","components/Table/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","children","Header","Body","Search","onSubmit","handleFormSubmit","onChange","handleInputChange","value","name","type","placeholder","Table","scope","onClick","sortEmployees","data","map","x","i","key","alt","first","last","src","picture","thumbnail","phone","email","moment","dob","date","format","App","state","employees","filterEmployees","search","sortOrder","searchFilter","query","filter","employee","toUpperCase","setState","console","log","event","target","preventDefault","sort","sortedEmployees","a","b","this","filterBy","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.41d28134.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nfunction Container(props) {\n\treturn <div className=\"container-fuild\">{props.children}</div>;\n}\n\nexport default Container;\n","import React from 'react';\nimport './style.css';\n\nfunction Header() {\n\treturn (\n\t\t<div className=\"header\">\n\t\t\t<h1>Employee Directory</h1>\n\t\t\t<h5>Click on the name to sort alphabetically or use the search box to narrow down the employees.</h5>\n\t\t</div>\n\t);\n}\n\nexport default Header;\n","import React from 'react';\nimport './style.css';\n\nfunction Body(props) {\n\treturn <div className=\"body\">{props.children}</div>;\n}\n\nexport default Body;\n","import React from 'react';\nimport './style.css';\n// import Dropdown from '../Dropdown';\n\nfunction Search(props) {\n\treturn (\n\t\t<form onSubmit={props.handleFormSubmit}>\n\t\t\t<div className=\"input-group searchDiv mb-3\">\n\t\t\t\t{/* <Dropdown /> */}\n\t\t\t\t<input\n\t\t\t\t\tonChange={props.handleInputChange}\n\t\t\t\t\tvalue={props.value}\n\t\t\t\t\tname=\"search\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName=\"form-control searchBox\"\n\t\t\t\t\tplaceholder=\"Search Employee\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</form>\n\t);\n}\n\nexport default Search;\n","import React from 'react';\nimport './style.css';\nimport moment from 'moment';\n\nfunction Table(props) {\n\treturn (\n\t\t<table className=\"table table-striped\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th scope=\"col\">Image</th>\n\t\t\t\t\t<th scope=\"col\">\n\t\t\t\t\t\t<button className=\"sortButton\" onClick={() => props.sortEmployees('name')}>\n\t\t\t\t\t\t\tName\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</th>\n\t\t\t\t\t<th scope=\"col\">\n\t\t\t\t\t\t<button className=\"sortButton\" onClick={() => props.sortEmployees('phone')}>\n\t\t\t\t\t\t\tPhone\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</th>\n\t\t\t\t\t<th scope=\"col\">\n\t\t\t\t\t\t<button className=\"sortButton\" onClick={() => props.sortEmployees('email')}>\n\t\t\t\t\t\t\tEmail\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</th>\n\t\t\t\t\t<th scope=\"col\">DOB</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{props.data.map((x, i) => (\n\t\t\t\t\t<tr key={`tr-${i}`}>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<img alt={`${x.name.first} ${x.name.last}`} src={x.picture.thumbnail} />\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>{`${x.name.first} ${x.name.last}`}</td>\n\t\t\t\t\t\t<td>{x.phone}</td>\n\t\t\t\t\t\t<td>{x.email}</td>\n\t\t\t\t\t\t<td>{moment(x.dob.date).format('MM-DD-YYYY')}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t))}\n\t\t\t</tbody>\n\t\t</table>\n\t);\n}\n\nexport default Table;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Container from './components/Container';\nimport Header from './components/Header';\nimport Body from './components/Body';\nimport Search from './components/Search';\nimport Table from './components/Table';\nimport employees from './employees.json';\n\nclass App extends Component {\n\t// Setting the component's initial state\n\tstate = {\n\t\temployees,\n\t\tfilterEmployees: [ ...employees ],\n\t\tsearch: '',\n\t\tsortOrder: true\n\t};\n\n\tsearchFilter = (query) => {\n\t\t/* This if statement will state the state of filterEmployees back to the original employees\n\t\tlist if the input field is left blank */\n\t\tif (!query) {\n\t\t\tthis.setState({ filterEmployees: [ ...employees ] });\n\t\t\treturn;\n\t\t}\n\n\t\tconst filterEmployees = this.state.employees.filter(\n\t\t\t(employee) =>\n\t\t\t\temployee.name.first.toUpperCase() === query.toUpperCase() ||\n\t\t\t\temployee.name.last.toUpperCase() === query.toUpperCase()\n\t\t);\n\t\tthis.setState({ filterEmployees });\n\t\tconsole.log(employees);\n\t};\n\n\thandleInputChange = (event) => {\n\t\t// Getting the value and name of the input which triggered the change\n\t\tconst { value, name } = event.target;\n\n\t\t// Updating the input's state...\n\t\t// ...the name variable is in the input's props\n\t\t// ...the value is what the user types in the input box\n\t\tthis.setState({\n\t\t\t[name]: value\n\t\t});\n\t};\n\n\thandleFormSubmit = (event) => {\n\t\t/* This is a function for an OnSubmit event for the form that holds the input box for search. \n\t\tIt will pass in the value of search, getting search from \n\t\thandleInputChange function, into the searchFilter function */\n\t\tevent.preventDefault();\n\t\tthis.searchFilter(this.state.search);\n\t};\n\n\tsortEmployees = (sort) => {\n\t\t// Sort by name, phone, and email using switch statement\n\t\tlet sortedEmployees = [];\n\t\tswitch (sort) {\n\t\t\tcase 'name':\n\t\t\t\tsortedEmployees = this.state.filterEmployees.sort((a, b) => (a[sort].last > b[sort].last ? 1 : -1));\n\t\t\t\treturn this.setState({ filterEmployees: sortedEmployees });\n\n\t\t\tcase 'phone':\n\t\t\t\tsortedEmployees = this.state.filterEmployees.sort((a, b) => (a[sort].phone > b[sort].phone ? 1 : -1));\n\t\t\t\treturn this.setState({ filterEmployees: sortedEmployees });\n\n\t\t\tcase 'email':\n\t\t\t\tsortedEmployees = this.state.filterEmployees.sort((a, b) => (a[sort].email > b[sort].email ? 1 : -1));\n\t\t\t\treturn this.setState({ filterEmployees: sortedEmployees });\n\n\t\t\tdefault:\n\t\t\t\tsortedEmployees = this.state.filterEmployees;\n\t\t\t\treturn this.setState({ filterEmployees: sortedEmployees });\n\t\t}\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Header />\n\t\t\t\t<Body>\n\t\t\t\t\t<Search\n\t\t\t\t\t\tvalue={this.state.search}\n\t\t\t\t\t\thandleInputChange={this.handleInputChange}\n\t\t\t\t\t\thandleFormSubmit={this.handleFormSubmit}\n\t\t\t\t\t\tdata={this.state.employees}\n\t\t\t\t\t\tfilterBy={this.state.filterBy}\n\t\t\t\t\t/>\n\t\t\t\t\t<Table data={this.state.filterEmployees} sortEmployees={this.sortEmployees} />\n\t\t\t\t</Body>\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nexport default App;\n\n// Search filter to narrow down employee list\n// let filteredEmp = [];\n// switch (query) {\n// \tcase 'name':\n// \t\tfilteredEmp = this.state.employees.filter(\n// \t\t\t(employee) =>\n// \t\t\t\temployee.name.first.toUpperCase() === query.toUpperCase() ||\n// \t\t\t\temployee.name.last.toUpperCase() === query.toUpperCase()\n// \t\t);\n// \t\tconsole.log(filteredEmp);\n// \t\treturn this.setState({ filterEmployees: filteredEmp });\n\n// \tcase 'phone':\n// \t\tfilteredEmp = this.state.employees.filter((employee) => employee.phone.toString() === query);\n// \t\tconsole.log(filteredEmp);\n// \t\treturn this.setState({ filterEmployees: filteredEmp });\n\n// \tcase 'email':\n// \t\tfilteredEmp = this.state.employees.filter((employee) => employee.email.toLowerCase() === query.toLowerCase());\n// \t\tconsole.log(filteredEmp);\n// \t\treturn this.setState({ filterEmployees: filteredEmp });\n\n// \tdefault:\n// \t\tfilteredEmp = this.state.filterEmployees;\n// \t\treturn this.setState({ filterEmployees: filteredEmp });\n// }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}